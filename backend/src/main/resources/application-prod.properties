# ===================================================================
# Production Profile Configuration
# ===================================================================

# ===================================================================
# Server Configuration
# ===================================================================
server.port=8080
server.servlet.context-path=/api/v1
server.ssl.enabled=true
server.ssl.key-store=classpath:keystore.p12
server.ssl.key-store-password=${SSL_KEYSTORE_PASSWORD}
server.ssl.key-store-type=PKCS12
server.compression.enabled=true

# ===================================================================
# Database Configuration
# ===================================================================
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5432/hr_assistant}
spring.datasource.username=${DB_USERNAME:hr_user}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Connection Pool Configuration
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# Liquibase Configuration
spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.xml
spring.liquibase.enabled=true
spring.liquibase.drop-first=false

# JPA Configuration
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# ===================================================================
# Redis Configuration
# ===================================================================
spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.password=${REDIS_PASSWORD:}
spring.data.redis.timeout=2000ms
spring.data.redis.lettuce.pool.max-active=20
spring.data.redis.lettuce.pool.max-idle=10
spring.data.redis.lettuce.pool.min-idle=5

# ===================================================================
# RabbitMQ Configuration
# ===================================================================
spring.rabbitmq.host=${RABBITMQ_HOST:localhost}
spring.rabbitmq.port=${RABBITMQ_PORT:5672}
spring.rabbitmq.username=${RABBITMQ_USERNAME:guest}
spring.rabbitmq.password=${RABBITMQ_PASSWORD:guest}
spring.rabbitmq.virtual-host=${RABBITMQ_VIRTUAL_HOST:/}
spring.rabbitmq.listener.simple.acknowledge-mode=auto
spring.rabbitmq.listener.simple.retry.enabled=true
spring.rabbitmq.listener.simple.retry.max-attempts=3
spring.rabbitmq.listener.simple.auto-startup=true

# ===================================================================
# MinIO/S3 Configuration
# ===================================================================
minio.endpoint=${MINIO_ENDPOINT:http://localhost:9000}
minio.access-key=${MINIO_ACCESS_KEY}
minio.secret-key=${MINIO_SECRET_KEY}
minio.bucket-name=${MINIO_BUCKET_NAME:hr-assistant-media}
minio.region=${MINIO_REGION:us-east-1}

# ===================================================================
# Security Configuration
# ===================================================================
jwt.secret=${JWT_SECRET}
jwt.expiration=${JWT_EXPIRATION:86400000}
jwt.refresh-expiration=${JWT_REFRESH_EXPIRATION:604800000}

# ===================================================================
# ML Models Configuration
# ===================================================================
ml.models.path=${ML_MODELS_PATH:/opt/models}
ml.models.whisper=${ML_WHISPER_MODEL:whisper-small.onnx}
ml.models.embeddings=${ML_EMBEDDINGS_MODEL:paraphrase-multilingual-MiniLM-L12-v2.onnx}
ml.models.classifier=${ML_CLASSIFIER_MODEL:rubert-classifier.onnx}
ml.models.voice-verification=${ML_VOICE_VERIFICATION_MODEL:ecapa-tdnn.onnx}
ml.models.face-recognition=${ML_FACE_RECOGNITION_MODEL:facenet.onnx}
ml.models.liveness=${ML_LIVENESS_MODEL:liveness-detector.onnx}
ml.models.ai-detector=${ML_AI_DETECTOR_MODEL:ai-text-detector.onnx}

# ===================================================================
# ML Training Data Configuration
# ===================================================================
ml.training.data.path=${ML_TRAINING_DATA_PATH:classpath:ml-data/training}
ml.training.competency.dataset=${ML_COMPETENCY_DATASET:it_dataset_combined_10000.csv}
ml.training.antifraud.dataset=${ML_ANTIFRAUD_DATASET:antifraud_data.csv}
ml.training.liveness.dataset=${ML_LIVENESS_DATASET:liveness_detection.csv}
ml.training.ai-detection.dataset=${ML_AI_DETECTION_DATASET:ai_text_detection.csv}

# ===================================================================
# Antifraud Configuration
# ===================================================================
antifraud.weights.liveness=${ANTIFRAUD_LIVENESS_WEIGHT:0.25}
antifraud.weights.face-match=${ANTIFRAUD_FACE_MATCH_WEIGHT:0.2}
antifraud.weights.voice-match=${ANTIFRAUD_VOICE_MATCH_WEIGHT:0.2}
antifraud.weights.text-ai=${ANTIFRAUD_TEXT_AI_WEIGHT:0.2}
antifraud.weights.visibility=${ANTIFRAUD_VISIBILITY_WEIGHT:0.1}
antifraud.weights.devtools=${ANTIFRAUD_DEVTOOLS_WEIGHT:0.05}
antifraud.threshold.reject=${ANTIFRAUD_REJECT_THRESHOLD:0.85}
antifraud.threshold.review=${ANTIFRAUD_REVIEW_THRESHOLD:0.6}

# ===================================================================
# Monitoring Configuration
# ===================================================================
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=when-authorized
management.metrics.export.prometheus.enabled=true
management.metrics.distribution.percentiles-histogram.http.server.requests=true

# ===================================================================
# Logging Configuration
# ===================================================================
logging.level.com.example.hr_assistant=INFO
logging.level.org.springframework.security=WARN
logging.level.ai.djl=WARN
logging.level.org.hibernate.SQL=WARN
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.file.name=/app/logs/hr-assistant.log
logging.file.max-size=100MB
logging.file.max-history=30

# ===================================================================
# LLM Provider Configuration
# ===================================================================
llm.provider=${LLM_PROVIDER:openai}
openai.api.key=${OPENAI_API_KEY}
openai.model=${OPENAI_MODEL:gpt-4}
gemini.api.key=${GEMINI_API_KEY}
gemini.model=${GEMINI_MODEL:gemini-pro}
llama.api.url=${LLAMA_API_URL:http://localhost:11434/api/generate}
llama.model=${LLAMA_MODEL:llama3}

# ===================================================================
# Production Features
# ===================================================================
spring.jpa.defer-datasource-initialization=false
spring.sql.init.mode=never

# ===================================================================
# WhisperX Service
# ===================================================================
whisperx.url=${WHISPERX_URL:http://whisperx:9000}

# ===================================================================
# CORS Configuration
# ===================================================================
cors.allowed-origins=${CORS_ALLOWED_ORIGINS:https://yourdomain.com}
cors.allowed-methods=${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
cors.allowed-headers=${CORS_ALLOWED_HEADERS:*}

# ===================================================================
# File Upload Configuration
# ===================================================================
spring.servlet.multipart.max-file-size=${MAX_FILE_SIZE:100MB}
spring.servlet.multipart.max-request-size=${MAX_REQUEST_SIZE:100MB}

# ===================================================================
# Cache Configuration
# ===================================================================
spring.cache.type=redis
spring.cache.redis.time-to-live=${CACHE_TTL_SECONDS:3600}000
spring.cache.redis.cache-null-values=false

# ===================================================================
# Rate Limiting
# ===================================================================
rate.limit.requests-per-minute=${RATE_LIMIT_REQUESTS_PER_MINUTE:100}
rate.limit.burst-capacity=${RATE_LIMIT_BURST_CAPACITY:200}
