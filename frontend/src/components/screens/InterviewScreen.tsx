import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { toast } from 'react-hot-toast';
import { useInterview, useStartInterview, useHeartbeat, useInterviewRecording } from '../../hooks/useInterview';

export default function InterviewScreen() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const interviewId = parseInt(id || '0');
  
  const { data: interview, isLoading } = useInterview(interviewId);
  const startInterviewMutation = useStartInterview();
  const { startHeartbeat, stopHeartbeat, isActive: heartbeatActive } = useHeartbeat(interviewId);
  const { isRecording, recordingTime, startRecording, stopRecording } = useInterviewRecording(interviewId, 1);
  
  const [consentGiven, setConsentGiven] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [mediaStream, setMediaStream] = useState<MediaStream | null>(null);
  const videoRef = useRef<HTMLVideoElement>(null);

  const questions = [
    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã",
    "–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?",
    "–ö–∞–∫–∏–µ —É –≤–∞—Å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã?",
    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–µ, –∫–æ—Ç–æ—Ä—É—é –≤–∞–º –ø—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å —Ä–µ—à–∞—Ç—å",
    "–ö–∞–∫ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ?",
    "–ö–∞–∫–∏–µ —É –≤–∞—Å –ø–ª–∞–Ω—ã –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ?",
  ];

  useEffect(() => {
    if (interview?.status === 'STARTED' && !heartbeatActive) {
      startHeartbeat();
    }
    
    return () => {
      stopHeartbeat();
    };
  }, [interview?.status, heartbeatActive, startHeartbeat, stopHeartbeat]);

  useEffect(() => {
    // Request camera and microphone permissions
    const requestPermissions = async () => {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({
          video: true,
          audio: true
        });
        setMediaStream(stream);
        
        if (videoRef.current) {
          videoRef.current.srcObject = stream;
        }
      } catch (error) {
        console.error('Failed to get media permissions:', error);
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
      }
    };

    requestPermissions();

    return () => {
      if (mediaStream) {
        mediaStream.getTracks().forEach(track => track.stop());
      }
    };
  }, []);

  const handleStartInterview = async () => {
    if (!consentGiven) {
      toast.error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö');
      return;
    }

    try {
      await startInterviewMutation.mutateAsync(interviewId);
      toast.success('–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–ø—É—â–µ–Ω–æ!');
    } catch (error) {
      console.error('Failed to start interview:', error);
    }
  };

  const handleConsentChange = (checked: boolean) => {
    setConsentGiven(checked);
  };

  const handleFullscreen = () => {
    if (!document.fullscreenElement) {
      document.documentElement.requestFullscreen();
      setIsFullscreen(true);
    } else {
      document.exitFullscreen();
      setIsFullscreen(false);
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const handleNextQuestion = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      toast.success('–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
      navigate('/dashboard');
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-neon-blue mx-auto"></div>
          <p className="mt-4 opacity-80">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é...</p>
        </div>
      </div>
    );
  }

  if (!interview) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <h1 className="text-3xl font-bold mb-4">‚ùå –ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h1>
          <button 
            onClick={() => navigate('/dashboard')}
            className="btn-neon"
          >
            üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–∞—à–±–æ—Ä–¥—É
          </button>
        </div>
      </div>
    );
  }

  if (interview.status === 'CREATED') {
    return (
      <div className="min-h-screen flex items-center justify-center p-4">
        <div className="card-neon w-full max-w-2xl p-8">
          <div className="text-center">
            <h1 className="text-5xl font-black text-gradient mb-6">
              üé§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é!
            </h1>
            
            <div className="mb-8">
              <h2 className="text-2xl font-bold mb-4">üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Ç–µ—Ä–≤—å—é:</h2>
              <div className="text-left space-y-3 bg-white bg-opacity-5 p-4 rounded-lg">
                <p><strong>üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç:</strong> {interview.candidateName}</p>
                <p><strong>üíº –í–∞–∫–∞–Ω—Å–∏—è:</strong> {interview.vacancyTitle}</p>
                <p><strong>üìä –°—Ç–∞—Ç—É—Å:</strong> {interview.status}</p>
              </div>
            </div>

            <div className="mb-8">
              <h2 className="text-2xl font-bold mb-4">üìù –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö:</h2>
              <div className="text-left space-y-4">
                <label className="flex items-start space-x-3">
                  <input
                    type="checkbox"
                    checked={consentGiven}
                    onChange={(e) => handleConsentChange(e.target.checked)}
                    className="mt-1 h-5 w-5 text-neon-blue focus:ring-neon-blue border-neon-blue rounded"
                  />
                  <span className="text-sm opacity-80">
                    –Ø –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –∑–∞–ø–∏—Å—å –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, 
                    –≤–∫–ª—é—á–∞—è –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –¥–ª—è —Ü–µ–ª–µ–π –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é 
                    –∏ –æ—Ü–µ–Ω–∫–∏ –º–æ–∏—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤.
                  </span>
                </label>
              </div>
            </div>

            <div className="mb-8">
              <h2 className="text-2xl font-bold mb-4">‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:</h2>
              <ul className="text-left space-y-2 text-sm opacity-70 bg-white bg-opacity-5 p-4 rounded-lg">
                <li>üåê –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</li>
                <li>üìπ –†–∞–±–æ—á–∞—è –∫–∞–º–µ—Ä–∞ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω</li>
                <li>üåç –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Chrome –∏–ª–∏ Firefox</li>
                <li>üö´ –ù–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏ –≤–æ –≤—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤—å—é</li>
              </ul>
            </div>

            <button
              onClick={handleStartInterview}
              disabled={!consentGiven || startInterviewMutation.isLoading}
              className={`btn-neon w-full text-lg py-4 ${!consentGiven ? 'opacity-50 cursor-not-allowed' : ''}`}
            >
              {startInterviewMutation.isLoading ? 'üöÄ –ó–∞–ø—É—Å–∫...' : 'üé¨ –ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é'}
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen text-white">
      {/* Header */}
      <div className="glass border-b border-neon-blue border-opacity-20 p-4 flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-gradient">üë§ {interview.candidateName}</h1>
          <p className="opacity-70">üíº {interview.vacancyTitle}</p>
        </div>
        <div className="flex items-center space-x-6">
          <div className="text-sm bg-white bg-opacity-5 px-3 py-2 rounded-lg">
            <span className="opacity-70">‚ùì –í–æ–ø—Ä–æ—Å:</span> <span className="text-neon-blue font-bold">{currentQuestion + 1} –∏–∑ {questions.length}</span>
          </div>
          <div className="text-sm bg-white bg-opacity-5 px-3 py-2 rounded-lg">
            <span className="opacity-70">‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:</span> <span className="text-neon-cyan font-bold">{formatTime(recordingTime)}</span>
          </div>
          <button
            onClick={handleFullscreen}
            className="btn-neon-cyan text-sm"
          >
            {isFullscreen ? 'üì± –í—ã–π—Ç–∏' : 'üñ•Ô∏è –ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω'}
          </button>
        </div>
      </div>

      <div className="flex h-screen">
        {/* Video Section */}
        <div className="flex-1 flex flex-col items-center justify-center p-8">
          <div className="relative w-full max-w-2xl">
            <video
              ref={videoRef}
              autoPlay
              muted
              playsInline
              className="w-full rounded-lg shadow-2xl border-2 border-neon-blue border-opacity-30"
            />
            
            {/* Recording indicator */}
            {isRecording && (
              <div className="absolute top-4 left-4 bg-red-600 text-white px-4 py-2 rounded-full flex items-center space-x-2 neon-glow-pink">
                <div className="w-3 h-3 bg-white rounded-full animate-pulse"></div>
                <span className="text-sm font-bold">üî¥ –ò–î–ï–¢ –ó–ê–ü–ò–°–¨</span>
              </div>
            )}
          </div>

          {/* Question */}
          <div className="mt-8 w-full max-w-2xl">
            <div className="card-neon p-6">
              <h2 className="text-2xl font-bold mb-4">‚ùì –í–æ–ø—Ä–æ—Å {currentQuestion + 1}:</h2>
              <p className="text-lg opacity-90 mb-6">{questions[currentQuestion]}</p>
              
              <div className="flex justify-center space-x-4">
                <button
                  onClick={isRecording ? stopRecording : startRecording}
                  className={`${isRecording ? 'btn-neon-pink' : 'btn-neon'} text-lg px-6 py-3`}
                >
                  {isRecording ? (
                    <>
                      <span>‚èπÔ∏è</span>
                      <span>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å</span>
                    </>
                  ) : (
                    <>
                      <span>üé§</span>
                      <span>–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å</span>
                    </>
                  )}
                </button>
                
                {currentQuestion < questions.length - 1 && (
                  <button
                    onClick={handleNextQuestion}
                    className="btn-neon-cyan text-lg px-6 py-3"
                    disabled={isRecording}
                  >
                    <span>‚û°Ô∏è</span>
                    <span>–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å</span>
                  </button>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Sidebar */}
        <div className="w-80 glass p-6 border-l border-neon-blue border-opacity-20">
          <h3 className="text-2xl font-bold mb-6">üìä –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä–≤—å—é</h3>
          
          <div className="space-y-6">
            <div className="card-neon p-4">
              <h4 className="font-bold mb-3 text-lg">‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</h4>
              <div className="space-y-3 text-sm">
                <div className="flex justify-between items-center">
                  <span className="opacity-80">üìπ –ö–∞–º–µ—Ä–∞:</span>
                  <span className="text-neon-green font-bold">‚úÖ –ê–∫—Ç–∏–≤–Ω–∞</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="opacity-80">üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω:</span>
                  <span className="text-neon-green font-bold">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="opacity-80">üíì Heartbeat:</span>
                  <span className={heartbeatActive ? "text-neon-green font-bold" : "text-red-400 font-bold"}>
                    {heartbeatActive ? "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" : "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}
                  </span>
                </div>
              </div>
            </div>

            <div className="card-neon p-4">
              <h4 className="font-bold mb-3 text-lg">üìà –ü—Ä–æ–≥—Ä–µ—Å—Å</h4>
              <div className="space-y-3">
                <div className="flex justify-between text-sm">
                  <span className="opacity-80">‚ùì –í–æ–ø—Ä–æ—Å—ã:</span>
                  <span className="text-neon-blue font-bold">{currentQuestion + 1} / {questions.length}</span>
                </div>
                <div className="w-full bg-white bg-opacity-10 rounded-full h-3">
                  <div
                    className="bg-gradient-to-r from-neon-blue to-neon-purple h-3 rounded-full transition-all duration-300"
                    style={{ width: `${((currentQuestion + 1) / questions.length) * 100}%` }}
                  ></div>
                </div>
                <div className="text-center text-sm opacity-70">
                  {Math.round(((currentQuestion + 1) / questions.length) * 100)}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                </div>
              </div>
            </div>

            <div className="card-neon p-4">
              <h4 className="font-bold mb-3 text-lg">üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</h4>
              <ul className="text-sm space-y-2 opacity-80">
                <li className="flex items-center space-x-2">
                  <span>üó£Ô∏è</span>
                  <span>–ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –≥—Ä–æ–º–∫–æ</span>
                </li>
                <li className="flex items-center space-x-2">
                  <span>üëÅÔ∏è</span>
                  <span>–°–º–æ—Ç—Ä–∏—Ç–µ –≤ –∫–∞–º–µ—Ä—É</span>
                </li>
                <li className="flex items-center space-x-2">
                  <span>üö´</span>
                  <span>–ù–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ –≤–∫–ª–∞–¥–∫–∏</span>
                </li>
                <li className="flex items-center space-x-2">
                  <span>üí¨</span>
                  <span>–û—Ç–≤–µ—á–∞–π—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ</span>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}